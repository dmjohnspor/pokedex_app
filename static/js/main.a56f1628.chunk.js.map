{"version":3,"sources":["utils.js","components/Pokedex.js","components/Pokemon.js","App.js","reportWebVitals.js","index.js"],"names":["toFirstCharUppercase","name","charAt","toUpperCase","slice","useStyles","makeStyles","theme","pokedexContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","textAlign","searchContainer","display","background","fade","palette","common","white","marginTop","marginBottom","searchIcon","alignSelf","searchInput","width","Pokedex","props","history","classes","useState","pokemonData","setPokemonData","filter","setFilter","useEffect","axios","get","then","response","console","log","results","data","newPokemonData","forEach","pokemon","index","id","sprite","AppBar","position","Toolbar","className","TextField","label","variant","onChange","e","target","value","Grid","container","spacing","Object","keys","map","pokemonId","includes","item","xs","sm","Card","onClick","push","CardMedia","image","style","height","CardContent","Typography","getPokemonCard","CircularProgress","Pokemon","match","params","undefined","setPokemon","catch","error","weight","types","sprites","fullImageUrl","front_default","src","typeInfo","type","generatePokemonJSX","Button","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createBrowserHistory","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a56f1628.chunk.js","sourcesContent":["export const toFirstCharUppercase = name =>\n    name.charAt(0).toUpperCase() + name.slice(1);","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n    AppBar,\n    Toolbar,\n    Grid,\n    Card,\n    CardMedia,\n    CardContent,\n    CircularProgress,\n    Typography,\n    TextField\n} from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport { toFirstCharUppercase } from '../utils';\n\nconst useStyles = makeStyles(theme => ({\n    pokedexContainer: {\n        paddingTop: '20px',\n        paddingLeft: '50px',\n        paddingRight: '50px'\n    },\n    cardMedia: {\n        margin: 'auto',\n    },\n    cardContent: {\n        textAlign: 'center',\n    },\n    searchContainer: {\n        display: 'flex',\n        background: fade(theme.palette.common.white, 0.15),\n        paddingLeft: '20px',\n        paddingRight: '20px',\n        marginTop: '5px',\n        marginBottom: '5px'\n    },\n    searchIcon: {\n        alignSelf: 'flex-end',\n        marginBottom: '5px',\n    },\n    searchInput: {\n        width: '200px',\n        margin: '5px',\n    }\n}));\n\nconst Pokedex = (props) => {\n    const { history } = props;\n    const classes = useStyles();\n    const [pokemonData, setPokemonData] = useState({});\n    const [filter, setFilter] = useState('');\n\n    const handleSearchChange = (e) => {\n        setFilter(e.target.value);\n    };\n\n    useEffect(() => {\n        axios\n            .get(`https://pokeapi.co/api/v2/pokemon?limit=898`)\n            .then(function (response) {\n                console.log(response)\n                const { data } = response;\n                const { results } = data;\n                const newPokemonData = {};\n                results.forEach((pokemon, index) => {\n                    newPokemonData[index + 1] = {\n                        id: index + 1,\n                        name: pokemon.name,\n                        sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${index + 1}.png`\n                    };\n                });\n                setPokemonData(newPokemonData);\n            });\n    }, []);\n\n    const getPokemonCard = (pokemonId) => {\n        const { id, name, sprite } = pokemonData[pokemonId];\n\n        return (\n            <Grid item xs={12} sm={4} key={pokemonId}>\n                <Card onClick={() => history.push(`/${pokemonId}`)}>\n                    <CardMedia\n                        className={classes.cardMedia}\n                        image={sprite}\n                        style={{ width: '130px', height: '130px' }}\n                    />\n                    <CardContent className={classes.cardContent}>\n                        <Typography>\n                            {`${id}. ${toFirstCharUppercase(name)}`}\n                        </Typography>\n                    </CardContent>\n                </Card>\n            </Grid>\n        );\n    };\n\n    return (\n        <>\n            <AppBar position='static'>\n                <Toolbar>\n                    <div className={classes.searchContainer}>\n                        <SearchIcon className={classes.searchIcon} />\n                        <TextField\n                            className={classes.searchInput}\n                            label='Pokemon'\n                            variant='standard'\n                            onChange={handleSearchChange}\n                        />\n                    </div>\n                </Toolbar>\n            </AppBar>\n            {pokemonData ? (\n                <Grid container spacing={2} className={classes.pokedexContainer}>\n                    {Object.keys(pokemonData).map(pokemonId =>\n                        pokemonData[pokemonId].name.includes(filter) &&\n                        getPokemonCard(pokemonId))}\n                </Grid>\n            ) : (<CircularProgress />)}\n        </>\n    );\n};\n\nexport default Pokedex;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Typography, CircularProgress, Button } from '@material-ui/core';\nimport { toFirstCharUppercase } from '../utils';\n\nconst Pokemon = (props) => {\n    const { history, match } = props;\n    const { params } = match;\n    const { pokemonId } = params;\n    const [pokemon, setPokemon] = useState(undefined);\n\n    useEffect(() => {\n        axios\n            .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}`)\n            .then(function (response) {\n                const { data } = response;\n                setPokemon(data);\n            })\n            .catch(function (error) {\n                setPokemon(false);\n            })\n    }, [pokemonId]);\n\n    const generatePokemonJSX = () => {\n        const { name, id, height, weight, types, sprites } = pokemon\n        const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\n        const { front_default } = sprites\n        return (\n            <>\n                <Typography variant='h1'>\n                    {`${id}`}. {toFirstCharUppercase(name)}\n                    <img src={front_default} />\n                </Typography>\n                <img style={{ width: '300px', height: '300px' }} src={fullImageUrl} />\n                <Typography variant='h3'>Pokemon Info</Typography>\n                <Typography>Height: {height}</Typography>\n                <Typography>Weight: {weight}</Typography>\n                <Typography variant='h6'>Types:</Typography>\n                {types.map(typeInfo => {\n                    const { type } = typeInfo;\n                    const { name } = type;\n                    return <Typography key={name}> {`${name}`}</Typography>\n                })}\n            </>\n        );\n    };\n\n    return (\n        <>\n            {pokemon === undefined && <CircularProgress />}\n            {pokemon !== undefined && pokemon && generatePokemonJSX()}\n            {pokemon === false && <Typography> Pokemon not found </Typography>}\n            {pokemon !== undefined && (\n                <Button variant='contained' onClick={() => history.push('/')}>Back to Pokedex</Button>\n            )}\n        </>\n    );\n};\n\nexport default Pokemon;","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Pokedex from './components/Pokedex';\nimport Pokemon from './components/Pokemon';\n\nconst App = () => (\n  <Switch>\n    <Route exact path=\"/\" render={(props) => <Pokedex {...props} />} />\n    <Route\n      exact\n      path=\"/:pokemonId\"\n      render={(props) => <Pokemon {...props} />}\n    />\n  </Switch>\n);\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}